// This file has been automatically generated by the Unreal Header Implementation tool

#include "FGWorldGridSubsystem.h"

FFGWorldGridCellData::FFGWorldGridCellData(){ }
FFGWorldGridCell::FFGWorldGridCell(){ }
FFGWorldGridCell::FFGWorldGridCell(const FFGWorldGridCellData& Data, const FVector& WorldLocation, int32 CellIndex){ }
void FFGWorldGridCell::OnTraceCompleted(const FTraceHandle& Handle, FTraceDatum& Data){ }
void UFGWorldGridDataAsset::AssignWorldCells(TArray<FFGWorldGridCellData>&& Cells, const FVector2D& GridMin, const FVector2D& GridMax, int32 Divisions){ }
void UFGWorldGridDataAsset::DebugDraw(){ }
AFGWorldGridSubsystem::AFGWorldGridSubsystem() : Super() {
	this->PrimaryActorTick.TickGroup = TG_PrePhysics; this->PrimaryActorTick.EndTickGroup = TG_PrePhysics; this->PrimaryActorTick.bTickEvenWhenPaused = false; this->PrimaryActorTick.bCanEverTick = true; this->PrimaryActorTick.bStartWithTickEnabled = true; this->PrimaryActorTick.bAllowTickOnDedicatedServer = true; this->PrimaryActorTick.TickInterval = 0;
	this->bAlwaysRelevant = true;
	this->SetReplicates(true);
}
AFGWorldGridSubsystem* AFGWorldGridSubsystem::Get(UWorld* world){ return nullptr; }
AFGWorldGridSubsystem* AFGWorldGridSubsystem::Get(UObject* worldContext){ return nullptr; }
void AFGWorldGridSubsystem::UpdateCellContainingBuildable( AFGBuildable* pBuildable){ }
FFGWorldGridCell* AFGWorldGridSubsystem::GetCellContainingWorldLocation(const FVector& WorldLocation){ return nullptr; }
FFGWorldGridCell* AFGWorldGridSubsystem::GetClosestCellToWorldLocation(const FVector& WorldLocation){ return nullptr; }
TArray<const FFGWorldGridCell*> AFGWorldGridSubsystem::GetCellNeighbours(const FFGWorldGridCell* Cell) const{ return TArray<const FFGWorldGridCell*>(); }
TArray<const FFGWorldGridCell*> AFGWorldGridSubsystem::GetCellNeighboursFromIndex(int32 Index) const{ return TArray<const FFGWorldGridCell*>(); }
TArray<int32> AFGWorldGridSubsystem::GetCellNeighbourIndicesFromIndex(int32 Index) const{ return TArray<int32>(); }
void AFGWorldGridSubsystem::BeginPlay(){ }
void AFGWorldGridSubsystem::EndPlay(const EEndPlayReason::Type EndPlayReason){ }
void AFGWorldGridSubsystem::Tick(float DeltaSeconds){ }
