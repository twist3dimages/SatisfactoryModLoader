// This file has been automatically generated by the Unreal Header Implementation tool

#include "Buildables/FGBuildableDroneStation.h"
#include "Hologram/FGFactoryHologram.h"
#include "FGPowerInfoComponent.h"
#include "Replication/FGReplicationDetailInventoryComponent.h"

AFGBuildableDroneStation::AFGBuildableDroneStation() : Super() {
	this->mTransferSpeed = 0.5;
	this->mStackTransferSize = 1;
	this->mDroneQueueRadius = 2000;
	this->mDroneQueueVerticalSeparation = 1000;
	this->mTripInformationSampleCount = 3;
	this->mStorageSizeX = 1;
	this->mStorageSizeY = 1;
	this->mBatteryStorageSizeX = 1;
	this->mBatteryStorageSizeY = 1;
	this->mInputInventoryHandler = CreateDefaultSubobject<UFGReplicationDetailInventoryComponent>(TEXT("InputInventoryHandler"));
	this->mOutputInventoryHandler = CreateDefaultSubobject<UFGReplicationDetailInventoryComponent>(TEXT("OutputInventoryHandler"));
	this->mBatteryInventoryHandler = CreateDefaultSubobject<UFGReplicationDetailInventoryComponent>(TEXT("BatteryInventoryHandler"));
	this->mPowerConsumptionExponent = 1.60000002384186;
	this->mPowerInfoClass = UFGPowerInfoComponent::StaticClass();
	this->mMinimumProducingTime = 2;
	this->mMinimumStoppedTime = 5;
	this->mNumCyclesForProductivity = 20;
	this->mPendingPotential = 1;
	this->mMinPotential = 0.00999999977648258;
	this->mMaxPotential = 1;
	this->mMaxPotentialIncreasePerCrystal = 0.5;
	this->mFluidStackSizeDefault = EStackSize::SS_FLUID;
	this->mFluidStackSizeMultiplier = 1;
	this->mSignificanceRange = 18000;
	this->mHologramClass = AFGFactoryHologram::StaticClass();
	this->MaxRenderDistance = -1;
	this->mFactoryTickFunction.TickGroup = TG_PrePhysics; this->mFactoryTickFunction.EndTickGroup = TG_PrePhysics; this->mFactoryTickFunction.bTickEvenWhenPaused = false; this->mFactoryTickFunction.bCanEverTick = true; this->mFactoryTickFunction.bStartWithTickEnabled = true; this->mFactoryTickFunction.bAllowTickOnDedicatedServer = true; this->mFactoryTickFunction.TickInterval = 0;
	this->mPrimaryColor.R = -1; this->mPrimaryColor.G = -1; this->mPrimaryColor.B = -1; this->mPrimaryColor.A = 1;
	this->mSecondaryColor.R = -1; this->mSecondaryColor.G = -1; this->mSecondaryColor.B = -1; this->mSecondaryColor.A = 1;
	this->mDismantleEffectClassName = FSoftClassPath("/Game/FactoryGame/Buildable/Factory/-Shared/BP_MaterialEffect_Dismantle.BP_MaterialEffect_Dismantle_C");
	this->mBuildEffectClassName = FSoftClassPath("/Game/FactoryGame/Buildable/Factory/-Shared/BP_MaterialEffect_Build.BP_MaterialEffect_Build_C");
	this->mHighlightParticleClassName = FSoftClassPath("/Game/FactoryGame/Buildable/-Shared/Particle/NewBuildingPing.NewBuildingPing_C");
	this->PrimaryActorTick.TickGroup = TG_PrePhysics; this->PrimaryActorTick.EndTickGroup = TG_PrePhysics; this->PrimaryActorTick.bTickEvenWhenPaused = false; this->PrimaryActorTick.bCanEverTick = true; this->PrimaryActorTick.bStartWithTickEnabled = true; this->PrimaryActorTick.bAllowTickOnDedicatedServer = true; this->PrimaryActorTick.TickInterval = 0;
	this->SetReplicates(true);
	this->NetDormancy = DORM_Awake;
	this->NetCullDistanceSquared = 5624999936;
}
void AFGBuildableDroneStation::GetLifetimeReplicatedProps(TArray<FLifetimeProperty>& OutLifetimeProps) const{ }
void AFGBuildableDroneStation::BeginPlay(){ }
void AFGBuildableDroneStation::EndPlay(const EEndPlayReason::Type EndPlayReason){ }
void AFGBuildableDroneStation::Factory_Tick(float dt){ }
void AFGBuildableDroneStation::Factory_TickProducing(float dt){ }
void AFGBuildableDroneStation::Factory_CollectInput_Implementation(){ }
void AFGBuildableDroneStation::GetDismantleRefund_Implementation(TArray< FInventoryStack >& out_refund) const{ }
void AFGBuildableDroneStation::Dismantle_Implementation(){ }
void AFGBuildableDroneStation::OnReplicationDetailActorRemoved(){ }
void AFGBuildableDroneStation::PostLoadGame_Implementation(int32 saveVersion, int32 gameVersion){ }
void AFGBuildableDroneStation::StartIsLookedAtForSnapping( AFGCharacterPlayer* byCharacter, bool IsValidSnap){ }
void AFGBuildableDroneStation::StopIsLookedAtForSnapping( AFGCharacterPlayer* byCharacter){ }
void AFGBuildableDroneStation::Undock(bool Immediate){ }
int32 AFGBuildableDroneStation::RequestDocking( AFGDroneVehicle* DroneToDock){ return int32(); }
void AFGBuildableDroneStation::SetStationDrone( AFGDroneVehicle* Drone){ }
FVector AFGBuildableDroneStation::GetDroneDockingStartLocation() const{ return FVector(); }
FVector AFGBuildableDroneStation::GetDroneDockingLocation() const{ return FVector(); }
void AFGBuildableDroneStation::EnsureInfoCreated(){ }
void AFGBuildableDroneStation::StartDockingSequence_Implementation( AFGDroneVehicle* Drone){ }
void AFGBuildableDroneStation::EndDockingSequence_Implementation( AFGDroneVehicle* Drone, bool ShouldTransferItems){ }
void AFGBuildableDroneStation::StartTakeoffSequence_Implementation( AFGDroneVehicle* Drone){ }
void AFGBuildableDroneStation::EndTakeoffSequence_Implementation( AFGDroneVehicle* Drone){ }
void AFGBuildableDroneStation::OnRep_ReplicationDetailActor(){ }
AFGReplicationDetailActor_DroneStation* AFGBuildableDroneStation::GetCastRepDetailsActor() const{ return nullptr; }
bool AFGBuildableDroneStation::FilterBatteryClasses(TSubclassOf< UObject > object, int32 idx) const{ return bool(); }
bool AFGBuildableDroneStation::IsValidFuel(TSubclassOf<  UFGItemDescriptor > resource) const{ return bool(); }
void AFGBuildableDroneStation::OnRep_ItemTransferringStage(){ }
void AFGBuildableDroneStation::OnRep_StationHasDronesInQueue(){ }
void AFGBuildableDroneStation::SetItemTransferringStage(EItemTransferringStage NewStage){ }
void AFGBuildableDroneStation::BeginItemTransfer(){ }
void AFGBuildableDroneStation::EndItemTransfer(){ }
EItemTransferTickResult AFGBuildableDroneStation::ItemTransferTick( UFGInventoryComponent* FromInventory,  UFGInventoryComponent* ToInventory, bool MustTransferEverything){ return EItemTransferTickResult(); }
FName AFGBuildableDroneStation::sBatteriesTag = FName();
