// This file has been automatically generated by the Unreal Header Implementation tool

#include "Hologram/FGLadderHologram.h"
#include "Buildables/FGBuildableLadder.h"
#include "Buildables/FGBuildableWall.h"
#include "Buildables/FGBuildableRoad.h"
#include "Buildables/FGBuildableRailroadTrack.h"
#include "Buildables/FGBuildableFoundation.h"
#include "Components/HierarchicalInstancedStaticMeshComponent.h"

AFGLadderHologram::AFGLadderHologram() : Super() {
	this->mLadderBottomSnapThreshold = 0.400000005960464;
	this->mCanDragDown = true;
	this->mCanDragUp = true;
	this->mInstancedMeshComponent = CreateDefaultSubobject<UHierarchicalInstancedStaticMeshComponent>(TEXT("Instanced Mesh Component")); this->mInstancedMeshComponent->SetupAttachment(this->RootComponent);
	this->mMaxPlacementFloorAngle = 35;
	this->mValidHitClasses.Add(AFGBuildableFoundation::StaticClass()); this->mValidHitClasses.Add(AFGBuildableRailroadTrack::StaticClass()); this->mValidHitClasses.Add(AFGBuildableRoad::StaticClass()); this->mValidHitClasses.Add(AFGBuildableWall::StaticClass()); this->mValidHitClasses.Add(AFGBuildableLadder::StaticClass());
	this->mUseBuildClearanceOverlapSnapp = true;
	this->SetHidden(true);
	this->SetReplicates(true);
}
void AFGLadderHologram::GetLifetimeReplicatedProps(TArray< FLifetimeProperty >& OutLifetimeProps) const{ }
void AFGLadderHologram::BeginPlay(){ }
bool AFGLadderHologram::IsValidHitResult(const FHitResult& hitResult) const{ return bool(); }
void AFGLadderHologram::SetHologramLocationAndRotation(const FHitResult& hitResult){ }
bool AFGLadderHologram::DoMultiStepPlacement(bool isInputFromARelease){ return bool(); }
bool AFGLadderHologram::TrySnapToActor(const FHitResult& hitResult){ return bool(); }
void AFGLadderHologram::SetMaterial( UMaterialInterface* material){ }
int32 AFGLadderHologram::GetBaseCostMultiplier() const{ return int32(); }
void AFGLadderHologram::SerializeConstructMessage(FArchive& ar, FNetConstructionID id){ }
void AFGLadderHologram::OnPendingConstructionHologramCreated_Implementation(AFGHologram* fromHologram){ }
void AFGLadderHologram::ConfigureActor( AFGBuildable* inBuildable) const{ }
void AFGLadderHologram::CheckValidFloor(){ }
void AFGLadderHologram::OnRep_TargetSegmentHeight(){ }
void AFGLadderHologram::UpdateClearance(){ }
