// This file has been automatically generated by the Unreal Header Implementation tool

#include "Hologram/FGPipelineSupportHologram.h"
#include "Buildables/FGBuildableRoad.h"
#include "Buildables/FGBuildableRailroadTrack.h"
#include "Buildables/FGBuildableFoundation.h"

AFGPipelineSupportHologram::AFGPipelineSupportHologram() : Super() {
	this->mCanAdjustVerticalAngle = true;
	this->mMaxPlacementFloorAngle = 35;
	this->mUseGradualFoundationRotations = true;
	this->mValidHitClasses.Add(AFGBuildableFoundation::StaticClass()); this->mValidHitClasses.Add(AFGBuildableRailroadTrack::StaticClass()); this->mValidHitClasses.Add(AFGBuildableRoad::StaticClass());
	this->mUseBuildClearanceOverlapSnapp = true;
	this->SetHidden(true);
	this->SetReplicates(true);
}
void AFGPipelineSupportHologram::BeginPlay(){ }
bool AFGPipelineSupportHologram::DoMultiStepPlacement(bool isInputFromARelease){ return bool(); }
bool AFGPipelineSupportHologram::IsValidHitResult(const FHitResult& hitResult) const{ return bool(); }
bool AFGPipelineSupportHologram::TrySnapToActor(const FHitResult& hitResult){ return bool(); }
void AFGPipelineSupportHologram::SetHologramLocationAndRotation(const FHitResult& hitResult){ }
void AFGPipelineSupportHologram::CheckClearance(){ }
void AFGPipelineSupportHologram::SerializeConstructMessage(FArchive& ar, FNetConstructionID id){ }
bool AFGPipelineSupportHologram::CheckClearanceForBuildingMesh(UStaticMeshComponent* mesh, const FComponentQueryParams& params){ return bool(); }
void AFGPipelineSupportHologram::SetSupportLength(float height){ }
void AFGPipelineSupportHologram::SnapToConnection(UFGPipeConnectionComponentBase* connection,  AFGPipelineHologram* parentPipeline){ }
void AFGPipelineSupportHologram::ResetBuildSteps(){ }
void AFGPipelineSupportHologram::ResetVerticalRotation(){ }
void AFGPipelineSupportHologram::UpdateSupportLengthRelativeLoc(){ }
void AFGPipelineSupportHologram::Scroll(int32 delta){ }
void AFGPipelineSupportHologram::ConfigureActor( AFGBuildable* inBuildable) const{ }
void AFGPipelineSupportHologram::OnRep_SupportMesh(){ }
void AFGPipelineSupportHologram::GetLifetimeReplicatedProps(TArray<FLifetimeProperty> & OutLifetimeProps) const { Super::GetLifetimeReplicatedProps(OutLifetimeProps); }
